[{"/Users/sugitataro/uttechclub/curriculm_2_taro-sugita_/react-to-go-real/src/index.tsx":"1","/Users/sugitataro/uttechclub/curriculm_2_taro-sugita_/react-to-go-real/src/reportWebVitals.ts":"2","/Users/sugitataro/uttechclub/curriculm_2_taro-sugita_/react-to-go-real/src/App.tsx":"3","/Users/sugitataro/uttechclub/curriculm_2_taro-sugita_/react-to-go-real/src/form.tsx":"4"},{"size":554,"mtime":1666865366931,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1666865366932,"results":"7","hashOfConfig":"6"},{"size":4341,"mtime":1669896286931,"results":"8","hashOfConfig":"6"},{"size":1077,"mtime":1669514652014,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"174wk4q",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"/Users/sugitataro/uttechclub/curriculm_2_taro-sugita_/react-to-go-real/src/index.tsx",[],[],"/Users/sugitataro/uttechclub/curriculm_2_taro-sugita_/react-to-go-real/src/reportWebVitals.ts",[],[],"/Users/sugitataro/uttechclub/curriculm_2_taro-sugita_/react-to-go-real/src/App.tsx",["24","25","26","27","28","29"],[],"/Users/sugitataro/uttechclub/curriculm_2_taro-sugita_/react-to-go-real/src/form.tsx",["30","31"],[],"\n\nimport { Agent } from \"http\";\nimport React from \"react\";\nimport { useState } from \"react\";\n\ntype Props = {\n  onSubmit: (e: React.FormEvent<HTMLFormElement>,name: string, age : number) => void; //e: React.FormEvent<HTMLFormElement>\n};\n\nconst Form = (props: Props) => {\n  const [name, setName] = useState(\"\");\n  const [age, setAge] = useState<number>(0);\n\n  const submit = (e: React.FormEvent<HTMLFormElement>) => { //e:: React.MouseEvent<HTMLFormElement, MouseEvent>\n    e.preventDefault();\n    props.onSubmit(e,name,age);\n    let temporary= +(e)\n  };\n\n  \n  return (\n    <form style={{ display: \"flex\", flexDirection: \"column\" }} onSubmit={submit}>\n      <label>Name: </label>\n      <input\n        type={\"text\"}\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      ></input>\n      <label>Age: </label>\n      <input\n        type={\"age\"}\n        style={{ marginBottom: 20 }}\n        value={age}\n        onChange={(e) => setAge(Number(e.target.value))}\n      ></input>\n      <button type={\"submit\"}>Post</button>\n    </form>\n  );\n};\n\nexport default Form;\n",[],{"ruleId":"32","severity":1,"message":"33","line":5,"column":8,"nodeType":"34","messageId":"35","endLine":5,"endColumn":12},{"ruleId":"32","severity":1,"message":"36","line":26,"column":10,"nodeType":"34","messageId":"35","endLine":26,"endColumn":14},{"ruleId":"32","severity":1,"message":"37","line":28,"column":10,"nodeType":"34","messageId":"35","endLine":28,"endColumn":13},{"ruleId":"38","severity":1,"message":"39","line":216,"column":13,"nodeType":"40","endLine":216,"endColumn":16},{"ruleId":"38","severity":1,"message":"39","line":217,"column":13,"nodeType":"40","endLine":217,"endColumn":16},{"ruleId":"41","severity":1,"message":"42","line":222,"column":18,"nodeType":"43","messageId":"44","endLine":223,"endColumn":7},{"ruleId":"32","severity":1,"message":"45","line":3,"column":10,"nodeType":"34","messageId":"35","endLine":3,"endColumn":15},{"ruleId":"32","severity":1,"message":"46","line":18,"column":9,"nodeType":"34","messageId":"35","endLine":18,"endColumn":18},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'name' is assigned a value but never used.","'age' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","putCommentInBraces","'Agent' is defined but never used.","'temporary' is assigned a value but never used."]